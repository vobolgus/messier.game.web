# Dockerfile for React Frontend (skychart_frontend)

# Stage 1: Build the React application
FROM node:20-alpine AS build

# Set the working directory
WORKDIR /app

# Copy package.json and pnpm-lock.yaml (or package-lock.json/yarn.lock)
COPY ./skychart_project/skychart_frontend/package.json ./skychart_project/skychart_frontend/pnpm-lock.yaml* ./
# If not using pnpm, adjust for npm (package-lock.json) or yarn (yarn.lock)
# COPY ./skychart_project/skychart_frontend/package.json ./skychart_project/skychart_frontend/package-lock.json ./

# Install pnpm globally if it was used for project setup, otherwise skip if using npm/yarn directly
RUN npm install -g pnpm

# Install dependencies using pnpm
RUN pnpm install --frozen-lockfile
# Or for npm: RUN npm ci
# Or for yarn: RUN yarn install --frozen-lockfile

# Copy the rest of the application code
COPY ./skychart_project/skychart_frontend/src ./src
COPY ./skychart_project/skychart_frontend/public ./public

# Copy any other necessary files like .env for build time, or tsconfig.json if typescript
# COPY ./skychart_project/skychart_frontend/.env.production ./.env.production

# Build the application for production
RUN pnpm run build
# Or for npm: RUN npm run build
# Or for yarn: RUN yarn build

# Stage 2: Serve the built application using a lightweight web server
FROM nginx:stable-alpine

# Copy the build output from the build stage to Nginx's web server directory
COPY --from=build /app/dist /usr/share/nginx/html
# The output folder might be 'build' or 'dist' depending on the React setup (create-react-app is 'build', Vite is 'dist')
# The create_react_app template used outputs to 'dist', so we use that.

# Copy a custom Nginx configuration file if needed (optional)
# COPY nginx.conf /etc/nginx/conf.d/default.conf
# A default Nginx config usually works for SPAs. If you need specific routing or proxying, add a custom config.
# For a typical SPA, you might need to configure Nginx to redirect all non-asset requests to index.html.
# Example nginx.conf content for SPA:
# server {
#   listen 80;
#   server_name localhost;
# 
#   root /usr/share/nginx/html;
#   index index.html index.htm;
# 
#   location / {
#     try_files $uri $uri/ /index.html;
#   }
# 
#   # Optional: Add headers for caching, security, etc.
#   location ~* \.(?:jpg|jpeg|gif|png|ico|css|js)$ {
#     expires 7d;
#     add_header Cache-Control "public";
#   }
# }

# Expose port 80 for Nginx
EXPOSE 80

# Start Nginx when the container launches
CMD ["nginx", "-g", "daemon off;"]

